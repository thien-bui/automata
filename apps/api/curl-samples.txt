### Route Time (Google Routes provider)

# Driving directions between two addresses
curl -G "http://localhost:4000/api/route-time" \
  -H "accept: application/json" \
  --data-urlencode "from=1600 Amphitheatre Parkway, Mountain View, CA" \
  --data-urlencode "to=1 Infinite Loop, Cupertino, CA" \
  --data-urlencode "mode=driving"

# Transit directions with explicit freshness window
curl -G "http://localhost:4000/api/route-time" \
  -H "accept: application/json" \
  --data-urlencode "from=Empire State Building, New York, NY" \
  --data-urlencode "to=John F. Kennedy International Airport" \
  --data-urlencode "mode=transit" \
  --data-urlencode "freshnessSeconds=420"

### Weather (Google Weather provider)

# Basic weather request for a location
curl -G "http://localhost:4000/api/weather" \
  -H "accept: application/json" \
  --data-urlencode "location=San Francisco, CA"

# Weather request with custom freshness window
curl -G "http://localhost:4000/api/weather" \
  -H "accept: application/json" \
  --data-urlencode "location=New York, NY" \
  --data-urlencode "freshnessSeconds=600"

# Weather request forcing refresh (bypass cache)
curl -G "http://localhost:4000/api/weather" \
  -H "accept: application/json" \
  --data-urlencode "location=London, UK" \
  --data-urlencode "forceRefresh=true"

### Discord Guild Status

# Basic Discord guild status request
curl -G "http://localhost:4000/api/discord-status" \
  -H "accept: application/json"

# Discord status request forcing refresh (bypass cache)
curl -G "http://localhost:4000/api/discord-status" \
  -H "accept: application/json" \
  --data-urlencode "forceRefresh=true"

# Expected Discord status response format:
# {
#   "guildId": "123456789012345678",
#   "guildName": "Your Server Name",
#   "totalMembers": 150,
#   "onlineMembers": 42,
#   "members": [
#     {
#       "id": "123456789012345678",
#       "username": "username",
#       "displayName": "Display Name",
#       "status": "online",
#       "avatarUrl": "https://cdn.discordapp.com/avatars/...",
#       "bot": false
#     }
#   ],
#   "lastUpdatedIso": "2024-01-01T12:00:00.000Z",
#   "cache": {
#     "hit": true,
#     "ageSeconds": 30,
#     "staleWhileRevalidate": false
#   }
# }

### Reminder API

# Get reminders for today
curl -G "http://localhost:4000/api/reminder" \
  -H "accept: application/json" \
  --data-urlencode "date=2025-10-15"

# Get reminders for a specific date
curl -G "http://localhost:4000/api/reminder" \
  -H "accept: application/json" \
  --data-urlencode "date=2025-10-16"

# Get reminders for tomorrow
curl -G "http://localhost:4000/api/reminder" \
  -H "accept: application/json" \
  --data-urlencode "date=2025-10-16"

# Get reminders with cache refresh
curl -G "http://localhost:4000/api/reminder" \
  -H "accept: application/json" \
  --data-urlencode "date=2025-10-15" \
  --data-urlencode "forceRefresh=true"

# Mark a reminder as completed for today
curl -X POST "http://localhost:4000/api/reminder/complete" \
  -H "accept: application/json" \
  -H "Content-Type: application/json" \
  -d '{
    "reminderId": "reminder-12345"
  }'

# Mark a reminder as completed for a specific date
curl -X POST "http://localhost:4000/api/reminder/complete" \
  -H "accept: application/json" \
  -H "Content-Type: application/json" \
  -d '{
    "reminderId": "reminder-12345",
    "date": "2025-10-15"
  }'

# Get reminder scheduler status
curl -G "http://localhost:4000/api/reminder/status" \
  -H "accept: application/json"

# Expected reminder response format:
# {
#   "reminders": [
#     {
#       "id": "reminder-12345",
#       "title": "Morning Standup",
#       "description": "Daily team standup meeting",
#       "scheduledAt": "2025-10-15T14:00:00.000Z",
#       "isRecurring": true,
#       "isCompleted": false,
#       "createdAt": "2025-10-14T12:00:00.000Z"
#     }
#   ],
#   "expiresAfterMinutes": 60,
#   "cache": {
#     "hit": false,
#     "ageSeconds": 0,
#     "staleWhileRevalidate": false
#   }
# }

# Expected reminder completion response format:
# {
#   "success": true,
#   "message": "Reminder marked as completed"
# }

# Expected scheduler status response format:
# {
#   "initialized": true,
#   "todaySeeded": true,
#   "tomorrowSeeded": true,
#   "templateCount": 5
# }
